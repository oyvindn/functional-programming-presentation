Currying:

  - Bruker clojures og lexical scope


  - F.eks. istedet for å ha en funksjon som tar inn 2 argumenter -> en funksjon tar inn et argument og returnerer en funksjon som tar inn det andre argumentet.

    erlang eksempel:

    is_sorted(X) ->
      fun(Y) ->
        fun(Z) ->
          (X < Y) and (Y < Z)
        end
      end.

    ((is_sorted(5))(6))(7). // true
    is_sorted(5)            // #Fun<...>


    fun x => fn y => fn z => z >= y andalso y >= x

    sorted 5 4 3 // true

    * Syntactic sugar: fun sorted x y z = z >= y andalso y >= x

  - Alle funksjoner har bare et argument i Haskell og SML. Viser eksempler?

  -Performance: Avhengig av implementasjonen på språket. I de mest brukte implementasjonene av OCaml, Haskell og F# er curried functions ofte raskere enn tupling. Currying -> standard for multi-arg functions.


  - Partial application:
    * En av fordelene med currying.
    * Kan returnere en closure, som kan kalles med en gang eller brukes i en annen funksjon.